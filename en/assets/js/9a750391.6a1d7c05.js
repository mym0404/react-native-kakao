"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9952],{7908:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var s=t(4848),i=t(8453);const a={sidebar_position:4},r="Get KakaoTalk Friends",o={id:"social/get-friends",title:"Get KakaoTalk Friends",description:"Get KakaoTalk Friends",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/social/get-friends.mdx",sourceDirName:"social",slug:"/social/get-friends",permalink:"/en/docs/social/get-friends",draft:!1,unlisted:!1,editUrl:"https://github.com/mym0404/react-native-kakao/tree/main/docs/docs/social/get-friends.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Select KakaoTalk Friends",permalink:"/en/docs/social/select-talk-friends"},next:{title:"Package - Channel",permalink:"/en/docs/category/package---channel"}},d={},l=[{value:"Get KakaoTalk Friends",id:"get-kakaotalk-friends-1",level:2},{value:"Usage",id:"usage",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"get-kakaotalk-friends",children:"Get KakaoTalk Friends"}),"\n",(0,s.jsx)(n.h2,{id:"get-kakaotalk-friends-1",children:"Get KakaoTalk Friends"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://developers.kakao.com/docs/latest/ko/kakaotalk-social/android#get-friends",children:"Official Documentation"})}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"To use the API, the user must have agreed to Kakao login and related consent items."}),(0,s.jsx)(n.p,{children:"The picker and get friends list API can only be used in apps granted permission."})]}),"\n",(0,s.jsx)(n.p,{children:"Fetches the KakaoTalk friends list of the currently logged-in user. You can optionally specify the sort order of the friends list and the number of friends per page when making a request. If requested without parameters, the request is sent with the default settings."}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:["You can fetch the friends list using ",(0,s.jsx)(n.code,{children:"getFriends()"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"It is defined as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"export function getFriends(params: {\n  options?: KakaoTalkGetFriendsOptions;\n}): Promise<KakaoTalkGetFriendsResult>\n"})}),"\n",(0,s.jsx)(n.p,{children:"The types used are as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"/**\n * KakaoTalk Friend\n *\n * @property id Member number\n * @property uuid Unique ID to send messages. This information may change depending on the user's account status and is not recommended as the user identifier within the app.\n * @property profileNickname Friend's nickname\n * @property profileThumbnailImage Thumbnail image URL\n * @property favorite Favorite status\n * @property allowedMsg Whether message reception is allowed. For app-joined friends, this corresponds to feed msg. For unjoined app friends, it corresponds to invite msg.\n */\nexport interface KakaoTalkFriend {\n  id?: number;\n  uuid: string;\n  profileNickname: string;\n  profileThumbnailImage?: string;\n  favorite?: boolean;\n  allowedMsg?: boolean;\n}\n\nexport interface KakaoTalkGetFriendsOptions {\n  offset?: number;\n  limit?: number;\n  order?: 'asc' | 'desc';\n  friendOrder?: 'nickname' | 'age' | 'favorite';\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);